TC: O(N);
SC: O(1);

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size(); // Get the size of the input array
        vector<int> ans(n, 1); // Initialize the answer array with 1s
        
        // Step 1: Compute prefix products
        for (int i = 1; i < n; i++) {
            ans[i] = ans[i - 1] * nums[i - 1]; // Multiply with the product of all elements to the left
        }
        
        // Step 2: Compute suffix products and combine with prefix products
        int suffix = 1; // Variable to keep track of suffix product
        for (int i = n - 2; i >= 0; i--) {
            suffix *= nums[i + 1]; // Update the suffix product
            ans[i] *= suffix;      // Multiply the current prefix product with the suffix product
        }
        
        return ans; // Return the resulting array
    }
};
