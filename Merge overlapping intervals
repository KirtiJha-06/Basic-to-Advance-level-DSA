TC : O(nlogn)
SC : O(n)

class Solution {
  public:
    vector<vector<int>> mergeOverlap(vector<vector<int>>& arr) {
        // Step 1: Sort the intervals by their starting points
        sort(arr.begin(), arr.end()); 
        
        // Step 2: Initialize the result with the first interval
        vector<vector<int>> ans; 
        ans.push_back(arr[0]);

        // Step 3: Iterate through the intervals
        for (int i = 1; i < arr.size(); i++) {
            int start = arr[i][0];  // Start of the current interval
            int end = arr[i][1];    // End of the current interval

            // Step 4: Check if the current interval overlaps with the last one in 'ans'
            if (start <= ans.back()[1]) {
                // Merge intervals by updating the end of the last interval in 'ans'
                ans.back()[1] = max(end, ans.back()[1]);
            } else {
                // If no overlap, add the current interval to 'ans'
                ans.push_back(arr[i]);
            }
        }
        // Step 5: Return the merged intervals
        return ans;
    }
};
