TC: O(N);
SC: O(1);


class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int slow = nums[0];
        int fast = nums[0];

        // Phase 1: Detect the cycle
        while (true) {
            slow = nums[slow];            // Move slow pointer one step
            fast = nums[nums[fast]];      // Move fast pointer two steps

            if (slow == fast)             // Cycle detected
                break;
        }

        // Phase 2: Find the duplicate
        int duplicate = nums[0];         // Start one pointer at the beginning
        while (slow != duplicate) {      // Move both pointers one step at a time
            slow = nums[slow];
            duplicate = nums[duplicate];
        }
        
        return slow;                     // Return the duplicate number
    }
};
