TC = O(N) SC = O(1)


// Function to return minimum number of jumps to end of array

class Solution {
  public:
    int minJumps(vector<int>& arr) {
        // code here
         int n = arr.size();
        
        // Edge case: single-element array
        if (n <= 1) return 0;
        
        // Edge case: If the first element is 0, and array size > 1
        if (arr[0] == 0) return -1;
        
        int jumps = 0, l = 0, r = 0;

        while (r < n - 1) {
            int farthest = 0;
            
            // Find the farthest we can reach in the current jump
            for (int i = l; i <= r; i++) {
                farthest = max(farthest, i + arr[i]);
            }
            
            // If we can't move further, return -1
            if (farthest <= r) return -1;

            // Update the window for the next jump
            l = r + 1;
            r = farthest;
            jumps++;
        }
        return jumps;
    }
};
